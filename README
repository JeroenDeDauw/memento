The idea of the Memento extension is it to make it as straightforward to access articles of the past as it is to access their current version.

The Memento framework allows you to see versions of articles as they existed at some date in the past. All you need to do is enter a URL of an article in your browser and specify the desired date in a browser plug-in. This way you can browse the Web of the past. What the Memento extension will present to you is a version of the article as it existed on or very close to the selected date. Obviously, this will only work if previous (archived) versions are available on the Web. Fortunately, MediaWiki is a Content Management System which implies that it maintains all revisions made to an article. This extension leverages this archiving functionality and provides native Memento support for MediaWiki.

This package contains the source code, build scripts, and tests for the Memento Mediawiki Extension.

This file also contains installation information, but more comprehensive information is at:  http://www.mediawiki.org/wiki/Extension:Memento

Note: the released version of this extension does not contain this file, so the target audience for this file is those who wish to build/maintain the source code.

# Directory Contents

* Makefile - the build script that does all of the magic
* README - this file
* TODO - list of items to address in the codebase
* Memento - the source code
* tests/integration - the integration tests
* tests/lib - libraries needed by the tests
* coding-standards - directory of coding standards shamelessly stolen from Mediawiki

# Installation

To install this package within Mediawiki perform the following:
* copy the Memento directory into the extensions directory of your Mediawiki installation
* add the following to the LocalSettings.php file in your Mediawiki installation:
        require_once("$IP/extensions/Memento/Memento.php");
        $wgArticlePath = "$wgScriptPath/index.php/$1";
        $wgUsePathInfo = true;

# Configuration

This extension has sensible defaults, but also allows the following settings to be added to LocalSettings.php in order to alter its behavior:
* $wgMementoTimemapNumberOfMementos - allows the user to alter the number of Mementos included in a TimeMap served up by this extension (default is 500)
* $wgMementoErrorPageType - has two values for the type of error page sent to the client:
        * 'friendly' - (default) display Mediawiki-style error pages for error conditions along with a 200 OK status code returned to the client
        * 'traditional' - display bare text error pages for error conditions along with the appropriate 400, 404, etc. status code returned to the client
* $wgMementoTimeNegotiation - has two values for the type of Memento Time Negotiation performed:
        * '200' - (default) Time Negotiation is performed in place, replacing the given wiki page with its Memento if an Accept-Datetime header is sent by the client
        * '302' - Time Negotiation is performed via redirection, enabling a TimeGate SpecialPage that can then perform TimeNegotiation outside of the normal wiki pages
* $wgMementoRecomendedRelations - is a boolean true/false toggle for the use of RECOMMENDED (but not REQUIRED) Memento link relations from the Memento RFC in the Link header
        * false - (default) return none of the RECOMMENDED link relations in the Link header to the client
        * true - return all of the RECOMMENDED link relations (first memento, last memento, from, until, etc.) in the Link header to the client; note that this is computationally expensive and will affect performance on a heavy usage site


# Packaging

To package the Memento Mediawiki Extension, type the following 
from this directory:

    make package

This serves to run everything needed to verify the code and package the zip for release.

# Unit Tests, Deployment, and Integration Tests

To deploy the Memento Mediawiki Extension for testing, one must first indicate
to the shell where Mediawiki is installed, then run the appropriate make target.

    export MWDIR=<where your Mediawiki is installed>
    make deploy

Once the code is deployed, the integration tests can be run.

    make integration-test

Note that the tests will fail if the software is not deployed.

To remove the software from a Mediawiki instance, type:

    make undeploy

Running the unit and integration tests requires phpunit.

You will need to change the test data inside tests/integration/test-data to reflect your Mediawiki installation URIs and appropriate expected data.  Seeing as Mementos vary from URI-R to URI-R, it was decided not to come up with a "one size fits all" integration test set.  Perhaps in the future.

Of course, the fastest development process is:
    1. [edit tests or change code, if necessary]
    2. make undeploy && make clean unit-test package deploy integration-test

# Code compliance verification

Running the code compliance requires phpcs.

This git repository uses and external repository for coding convention rules, so we can update the coding convention rules at any time.  The git command for performing the initial import is:

    git submodule update --init

To see if the code complies with Mediawiki's coding conventions, run:

    make verify
